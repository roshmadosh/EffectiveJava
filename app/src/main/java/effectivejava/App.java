/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package effectivejava;

import effectivejava.ch2.builder.Athlete;
import effectivejava.ch2.builder.BasketballPlayer;
import effectivejava.ch2.builder.SponsoredAthlete;
import effectivejava.ch2.builder.SponsoredAthlete.Sponsor;
import effectivejava.ch2.static_factory_methods.washeddishes.WashedDishes;

public class App {

    public static void main(String[] args) {

			//	Type of returned object from static factory method (i.e. DishWasher) is hidden from consumer.
			WashedDishes.getInstance().printDrawback();    

			// Instantiating an Athlete object using the builder pattern
			Athlete athlete = new Athlete.Builder(168.0, 57.5)
				.bench(60.0)
				.squat(100.25)
				.deadlift(105.1)
				.build();

			System.out.println(athlete);

			// Instantiating an object using the builder pattern, and that inherited builder methods.	
			SponsoredAthlete lebron = new BasketballPlayer.Builder(84)
				.addSponsor(Sponsor.NIKE) // inherited method, observe how it returns a BasketballPlayer.Builder instance and no typecasting is required
				.standingVertical(45) 
				.build();

			System.out.println(lebron);

			
    }
}
